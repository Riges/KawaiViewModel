<?php/** * Class Vbf_Mvc_Controller */abstract class Vbf_Mvc_Controller{    /**     * @var Symfony\Component\DependencyInjection\ContainerBuilder     */    private $serviceContainer;    /**     * @return \Symfony\Component\DependencyInjection\ContainerBuilder     */    public function getServiceContainer(){        return $this->serviceContainer;    }    /**     * @var     */    private $parameters;    /**     * @var     */    private $views;    /**     * @var     */    private $method;    /**     * @return mixed     */    protected function getMethod()    {        return $this->method;    }    /**     * @var     */    private $extension;    /**     * @return mixed     */    protected function getExtension()    {        return $this->extension;    }    /**     * @var     */    private $frontController;    /**     * @return mixed     */    protected function getFrontController()    {        return $this->frontController;    }    /**     * @var     */    private $modulePath;    /**     * @return mixed     */    protected function getModulePath()    {        return $this->modulePath;    }    /**     * @var     */    private $moduleName;    /**     * @return mixed     */    protected function getModuleName()    {        return $this->moduleName;    }    /**     * @var     */    private $actionName;    /**     * @return mixed     */    protected function getActionName()    {        return $this->actionName;    }    /**     * @var     */    private $methodName;    /**     * @return mixed     */    protected function getMethodName()    {        return $this->methodName;    }    /**     * @param $serviceContainer Symfony\Component\DependencyInjection\ContainerBuilder     */    public function __construct($serviceContainer) {        $this->serviceContainer = $serviceContainer;    }    /**     * @return mixed     */    protected abstract function onBefore();    /**     * @return mixed     */    protected abstract function onAfter();    /**     * @param $frontController     * @param $modulePath     * @param $moduleName     * @param $method     * @param $extension     * @param $actionName     * @param $methodName     */    public function initialize($frontController, $modulePath, $moduleName, $method, $extension, $actionName, $methodName)    {        $this->frontController = $frontController;        $this->modulePath = $modulePath;        $this->moduleName = $moduleName;        $this->method = $method;        $this->extension = $extension;        $this->actionName = $actionName;        $this->methodName = $methodName;        $this->parameters = array();        $this->autoViewEnabled = ($method == 'GET');    }    /**     * @param $view     * @param $parameter     * @param $value     */    protected function setViewParameter($view, $parameter, $value)    {        $this->parameters[$view][$parameter] = $value;    }    /**     * @param $parameter     * @param $value     */    protected function setParameter($parameter, $value)    {        $this->setViewParameter('', $parameter, $value);    }    /**     * @param $parametersArray     */    protected function setParameters($parametersArray)    {        $this->setViewParameters('', $parametersArray);    }    /**     * @param $view     * @param $parametersArray     */    protected function setViewParameters($view, $parametersArray)    {        foreach ($parametersArray as $parameter => $value) {            $this->setViewParameter($view, $parameter, $value);        }    }    /**     * @param $view     * @return string     */    private function getViewFilePath($view)    {        if ($view == '') $view = $this->methodName;        if ((strlen($view) > 0) && ($view[0] == '/')) {            $view = substr($view, 1);            $path = $this->frontController->getSiteFolder();        } else {            $path = $this->modulePath;        }        return $path . '/' . $view . "View." . $this->extension . ".php";    }    /**     * @param $view     * @return array     */    private function getViewParameters($view)    {        if (array_key_exists($view, $this->parameters)) {            return $this->parameters[$view];        } else {            return array();        }    }    /**     * @param $view     * @return Vbf_Mvc_View     * @throws Vbf_Mvc_Exception404     */    private function getView($view)    {        $path = $this->getViewFilePath($view);        if (!file_exists($path)) throw new Vbf_Mvc_Exception404("File not found: $path");        $parameters = $this->getViewParameters($view);        return new Vbf_Mvc_View($this->frontController, $path, $parameters);    }    /**     * @param $view     * @return string     */    protected function renderView($view)    {        return $this->getView($view)->render();    }    /**     * @param $view     */    protected function displayView($view)    {        $this->getView($view)->display();    }    /*    protected function addView($viewName)    {    }    protected function getView($viewName)    {    }*/    /**     * Redirect the user to an URL.     */    protected function redirectToUrl($url)    {        /*if(array_key_exists('HTTPS', $_SERVER) && $_SERVER['HTTPS']== "on")            $_SESSION['HTTP_REDIRECT'] = $_SERVER['REQUEST_URI'];        else            $_SESSION['HTTP_REDIRECT'] = $_SERVER['REQUEST_URI'];*/        $_SESSION['HTTP_REDIRECT'] = $_SERVER['REQUEST_URI'];        header('location: ' . $url);        flush();        die();    }    /**     * Redirect the user to another page on the site.     */    protected function redirect($uri)    {        throw new Exception('Not implemented.'.$uri);    }    /**     * Go back to the previous page.     */    protected function back()    {        if (!array_key_exists('HTTP_REFERER', $_SERVER)) {            throw new Exception('Unable to go back, no referer specified by browser.');        }        $this->redirectToUrl($_SERVER['HTTP_REFERER']);    }}